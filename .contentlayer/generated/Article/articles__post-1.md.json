{
  "title": "Next.js and Contentlayer static blog guide",
  "publishedAt": "2022-09-02",
  "tags": [
    "nextjs",
    "react"
  ],
  "image": "/public/post-1-hero.webp",
  "body": {
    "raw": "\nIn this post, I'm going to build a blog demo app using Next.js and the blog will be powered by [Contentlayer](https://www.contentlayer.dev/).\n\nWe'll be making a statically generated, fast and simple blog with no need for a backend.\n\n[Contentlayer](https://www.contentlayer.dev/) will power the blog functionality using markdown files that we can commit to our repo.\n\nLet's get started.\n\nFirst, lets create a new Next.js application, you can follow the official guide [here](https://nextjs.org/docs). I will be using `yarn` for this, but you can use `npm` or `pnpm` also.\n\n```bash\nyarn create next-app\n```\n\nYou will be presented with some options if you use the above command, like the application name.\n\nOnce that has ran, you should navigate into that folder you just created.\n\n## Installing Contentlayer\n\nHead over to the [official docs](https://www.contentlayer.dev/) if you want to read more about Contentlayer.\n\nAdd Contentlayer\n\n```bash\nyarn add contentlayer next-contentlayer\n```\n\nOnce that has done, open your code in an IDE and open the `next.config.js` file, it should look like this.\n\n```js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n};\n\nmodule.exports = nextConfig;\n```\n\nChange it to add the `withContentlayer` import\n\n```js\nconst { withContentlayer } = require(\"next-contentlayer\");\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n};\n\nmodule.exports = withContentlayer(nextConfig);\n```\n\nWith that out the way, we need to create a new file at the root of our project called `jsconfig.json` or `tsconfig.json` if using TypeScript.\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"],\n      \"contentlayer/generated\": [\"./.contentlayer/generated\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.jsx\", \"**/*.js\", \".contentlayer/generated\"]\n}\n```\n\nNext we're going to want to create a contentlayer config file in the root of our project called `contentlayer.config.js`\n\nThis is what I have in mine\n\n```js\nimport { defineDocumentType, makeSource } from \"contentlayer/source-files\";\n\nconst computedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.sourceFileName.replace(/\\.md$/, \"\"),\n  },\n};\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `posts/*.md`,\n  fields: {\n    title: { type: \"string\", required: true },\n    publishedAt: { type: \"string\", required: true },\n    tags: { type: \"string\" },\n    image: { type: \"string\" },\n  },\n  wordCount: {\n    type: \"number\",\n    resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: \"data\",\n  documentTypes: [Post],\n});\n```\n\nWhat this is doing is specifying a single document type called `Post` and they're all going to live inside a folder called `data/posts/*.md`.\n\nYou can read more about how this works [here](https://www.contentlayer.dev/docs/getting-started).\n\nWe're going to create two new folders, in the root of our project, create a folder called `data`, then inside that, create another called `posts`. The reason we're nesting it like this, is once you get your head around Contentlayer, you can extend the config above to define different document types, for instance, you might want to have `Posts`, `Projects` and `Guides` all stored inside your code.\n\nInside the `data/posts` folder, create some markdown files that have the following format:\n\n```md\n---\ntitle: Lorem Ipsum\npublishedAt: 2022-06-24\ntags: ['Nextjs', 'React'] // optional\nimage: '/static/post-1-hero.webp' // optional\n---\n\nMollit nisi cillum exercitation minim officia velit laborum non Lorem\nadipisicing dolore. Labore commodo consectetur commodo velit adipisicing irure\ndolore dolor reprehenderit aliquip. Reprehenderit cillum mollit eiusmod\nexcepteur elit ipsum aute pariatur in. Cupidatat ex culpa velit culpa ad non\nlabore exercitation irure laborum.\n```\n\nThe title and publishedAt are required, but the tags and image are not, they're optional, (we specified this in the config above) so try and create some posts with and without the optional fields.\n\nThe folder structure should be the following:\n\n```\ndocs/\n├─ posts/\n│  ├─ post-1.md\n│  ├─ post-2.md\n│  ├─ post-3.md\n```\n\nYou are free to call these markdown files whatever you want, keep them lower-case and hyphenated as this will be the slug/url for that post.\n\nBefore we go any further, lets test that contentlayer is all hooked up correctly.\n\n```\nyarn dev\n```\n\nIf all works, you should get an output a bit like the following:\n\n```\n$ next dev\nready - started server on 0.0.0.0:3000, url: http://localhost:3000\ninfo  - SWC minify release candidate enabled. https://nextjs.link/swcmin\nGenerated 3 documents in .contentlayer\nevent - compiled client and server successfully in 1225 ms (178 modules)\nwait  - compiling...\nevent - compiled client and server successfully in 49 ms (178 modules)\n```\n\nNotice the `Generated 3 documents in .contentlayer` bit, that tells us that we've hooked contentlayer up and its generated 3 files based on our markdown files.\n\nIf we look in our project, a `.contentlayer` folder has been created, don't edit anything inside of here as it gets regenerated each time things are changed. But if we go take a look, we should have a folder inside called `generated` and a `Post` folder inside that.\n\n```\n.\n└── .contentlayer/\n    ├── .cache\n    └── generated/\n        └── Post/\n            ├── _index.json\n            ├── _index.mjs\n            ├── posts__post-1.md.json\n            ├── posts__post-2.md.json\n            └── posts__post-3.md.json\n```\n\nTake a look at one of the files, `posts__post-1.md.json` and it will look something like this:\n\n```\n{\n  \"title\": \"My first blog post\",\n  \"publishedAt\": \"2022-06-24T00:00:00.000Z\",\n  \"tags\": [\n    \"Nextjs\",\n    \"React\"\n  ],\n  \"image\": \"/static/post-1-hero.webp\",\n  \"body\": {\n    \"raw\": \"\\nMollit nisi cillum exercitation minim officia velit laborum non Lorem\\nadipisicing dolore. Labore commodo consectetur commodo velit adipisicing irure\\ndolore dolor reprehenderit aliquip. Reprehenderit cillum mollit eiusmod\\nexcepteur elit ipsum aute pariatur in. Cupidatat ex culpa velit culpa ad non\\nlabore exercitation irure laborum.\\n\",\n    \"html\": \"<p>Mollit nisi cillum exercitation minim officia velit laborum non Lorem\\nadipisicing dolore. Labore commodo consectetur commodo velit adipisicing irure\\ndolore dolor reprehenderit aliquip. Reprehenderit cillum mollit eiusmod\\nexcepteur elit ipsum aute pariatur in. Cupidatat ex culpa velit culpa ad non\\nlabore exercitation irure laborum.</p>\"\n  },\n  \"_id\": \"posts/post-1.md\",\n  \"_raw\": {\n    \"sourceFilePath\": \"posts/post-1.md\",\n    \"sourceFileName\": \"post-1.md\",\n    \"sourceFileDir\": \"posts\",\n    \"contentType\": \"markdown\",\n    \"flattenedPath\": \"posts/post-1\"\n  },\n  \"type\": \"Post\",\n  \"slug\": \"post-1\"\n}\n```\n\nIn this file, we can see what contentlayer has generated, we've got `body.html` from our Markdown content, our slug, tags, date and title all there. Now lets use that inside react!\n\n## Rendering the posts\n\nWe're going to keep this simple by just using the `index.js` page to fetch our content, but we could if we wanted to, break this out into a separate page.\n\nOpen up the `pages/index.js` file and delete everything inside of it, we're going to start fresh.\n\nI'm a big fan of arrow functions but if you want to use a traditional function, that's fine.\n\nPlace this inside the `inedx.js` file to get started.\n\n```jsx\nconst Index = () => {\n  return <div>Hello world.</div>;\n};\n\nexport default Index;\n```\n\nIf you run the app with `yarn dev` now, and open it in a browser, `http://localhost:3000`, you should see a blank page with `hello world` in the corner. If so, great! Let's move on.\n\nNow update your index.js file to have the following:\n\n```jsx\nimport { allPosts } from \"contentlayer/generated\";\n\nexport async function getStaticProps() {\n  const posts = allPosts.sort(\n    (a, b) => Number(new Date(b.publishedAt)) - Number(new Date(a.publishedAt))\n  );\n  return { props: { posts } };\n}\n\nconst Index = ({ posts }) => {\n  console.log(posts);\n  return <div>Hello world!</div>;\n};\n\nexport default Index;\n```\n\nWhat we're doing here is adding the `allPosts` import that contentlayer generated, remember the `.contentlayer` folder, take a look in there at the `_index.mjs` file, that's where the `allPosts` function comes from.\n\nWe're going to use Next.js `getStaticProps` method (which is asynchronous) - `getStaticProps` is a method to tell Next.js to pre-render this page at build time, and use the props provided by `getStaticProps`. You can read more about this [here](https://nextjs.org/docs/basic-features/data-fetching/get-static-props).\n\nWe're then passing `posts` to the `Index` method, and if you `console.log(posts)` inside that, you'll be able to see them on the running app console.\n\nI also created a folder at the root of my project called `static` with some images inside `post-1-hero.webp` which is what is in the markdown file for the `image` tag.\n\nThis is my final `index.js` file\n\n```jsx\nimport { allPosts } from \"contentlayer/generated\";\nimport Image from \"next/image\";\n\nexport async function getStaticProps() {\n  const posts = allPosts.sort(\n    (a, b) => Number(new Date(b.publishedAt)) - Number(new Date(a.publishedAt))\n  );\n  return { props: { posts } };\n}\n\nconst Index = ({ posts }) => {\n  return (\n    <div>\n      <div className=\"posts\">\n        <h1>Posts</h1>\n\n        {posts.map((post, i) => (\n          <div key={i} className=\"post\">\n            <div>\n              <h2>{post.title}</h2>\n\n              <span>{post.publishedAt}</span>\n\n              {/* Loop through any tags if we have any */}\n              <ul>\n                {post.tags && post.tags.map((tag, i) => <li key={i}>{tag}</li>)}\n              </ul>\n            </div>\n\n            {post.image && (\n              <div\n                style={{\n                  width: \"200px\",\n                  position: \"relative\",\n                  height: \"100px\",\n                }}\n              >\n                <Image\n                  src={post.image}\n                  alt={post.title}\n                  layout=\"fill\"\n                  objectFit=\"cover\"\n                />\n              </div>\n            )}\n\n            {/* Post body */}\n            <p>{post.body.raw}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n```\n\nIf you've followed this guide, you should be able to start your project\n\n```\nyarn dev\n```\n\nand see some `posts` on the page.\n\nThis will all be statically generated at build time which is great for speed, no need for a back-end to store your blog posts any more, just add a new post markdown file, commit it, and run a build/deploy.\n\nWhilst there are so many things that can be done with Contentlayer, you can look at adding pagination, fetching next and previous posts and having multiple document types, all within the same code-base.\n\nI really like contentlayer and the fact that it means I can write blog posts/article and just store them in my Git repo, posts can then be version controlled and I don't have the overhead of running a server to store the posts.\n\nFeel free to checkout this code in my repo [here](https://github.com/lordkerwin/nextjs-contentlayer-demo).\n\nI also use Contentlayer on my personal website, you can see the code for that [here](https://github.com/lordkerwin/v2) or see it in action by going to [seankerwin.dev](https://seankerwin.dev)\n",
    "html": "<p>In this post, I'm going to build a blog demo app using Next.js and the blog will be powered by <a href=\"https://www.contentlayer.dev/\">Contentlayer</a>.</p>\n<p>We'll be making a statically generated, fast and simple blog with no need for a backend.</p>\n<p><a href=\"https://www.contentlayer.dev/\">Contentlayer</a> will power the blog functionality using markdown files that we can commit to our repo.</p>\n<p>Let's get started.</p>\n<p>First, lets create a new Next.js application, you can follow the official guide <a href=\"https://nextjs.org/docs\">here</a>. I will be using <code>yarn</code> for this, but you can use <code>npm</code> or <code>pnpm</code> also.</p>\n<pre><code class=\"language-bash\">yarn create next-app\n</code></pre>\n<p>You will be presented with some options if you use the above command, like the application name.</p>\n<p>Once that has ran, you should navigate into that folder you just created.</p>\n<h2>Installing Contentlayer</h2>\n<p>Head over to the <a href=\"https://www.contentlayer.dev/\">official docs</a> if you want to read more about Contentlayer.</p>\n<p>Add Contentlayer</p>\n<pre><code class=\"language-bash\">yarn add contentlayer next-contentlayer\n</code></pre>\n<p>Once that has done, open your code in an IDE and open the <code>next.config.js</code> file, it should look like this.</p>\n<pre><code class=\"language-js\">/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n};\n\nmodule.exports = nextConfig;\n</code></pre>\n<p>Change it to add the <code>withContentlayer</code> import</p>\n<pre><code class=\"language-js\">const { withContentlayer } = require(\"next-contentlayer\");\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n};\n\nmodule.exports = withContentlayer(nextConfig);\n</code></pre>\n<p>With that out the way, we need to create a new file at the root of our project called <code>jsconfig.json</code> or <code>tsconfig.json</code> if using TypeScript.</p>\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"],\n      \"contentlayer/generated\": [\"./.contentlayer/generated\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.jsx\", \"**/*.js\", \".contentlayer/generated\"]\n}\n</code></pre>\n<p>Next we're going to want to create a contentlayer config file in the root of our project called <code>contentlayer.config.js</code></p>\n<p>This is what I have in mine</p>\n<pre><code class=\"language-js\">import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\n\nconst computedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.sourceFileName.replace(/\\.md$/, \"\"),\n  },\n};\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `posts/*.md`,\n  fields: {\n    title: { type: \"string\", required: true },\n    publishedAt: { type: \"string\", required: true },\n    tags: { type: \"string\" },\n    image: { type: \"string\" },\n  },\n  wordCount: {\n    type: \"number\",\n    resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: \"data\",\n  documentTypes: [Post],\n});\n</code></pre>\n<p>What this is doing is specifying a single document type called <code>Post</code> and they're all going to live inside a folder called <code>data/posts/*.md</code>.</p>\n<p>You can read more about how this works <a href=\"https://www.contentlayer.dev/docs/getting-started\">here</a>.</p>\n<p>We're going to create two new folders, in the root of our project, create a folder called <code>data</code>, then inside that, create another called <code>posts</code>. The reason we're nesting it like this, is once you get your head around Contentlayer, you can extend the config above to define different document types, for instance, you might want to have <code>Posts</code>, <code>Projects</code> and <code>Guides</code> all stored inside your code.</p>\n<p>Inside the <code>data/posts</code> folder, create some markdown files that have the following format:</p>\n<pre><code class=\"language-md\">---\ntitle: Lorem Ipsum\npublishedAt: 2022-06-24\ntags: ['Nextjs', 'React'] // optional\nimage: '/static/post-1-hero.webp' // optional\n---\n\nMollit nisi cillum exercitation minim officia velit laborum non Lorem\nadipisicing dolore. Labore commodo consectetur commodo velit adipisicing irure\ndolore dolor reprehenderit aliquip. Reprehenderit cillum mollit eiusmod\nexcepteur elit ipsum aute pariatur in. Cupidatat ex culpa velit culpa ad non\nlabore exercitation irure laborum.\n</code></pre>\n<p>The title and publishedAt are required, but the tags and image are not, they're optional, (we specified this in the config above) so try and create some posts with and without the optional fields.</p>\n<p>The folder structure should be the following:</p>\n<pre><code>docs/\n├─ posts/\n│  ├─ post-1.md\n│  ├─ post-2.md\n│  ├─ post-3.md\n</code></pre>\n<p>You are free to call these markdown files whatever you want, keep them lower-case and hyphenated as this will be the slug/url for that post.</p>\n<p>Before we go any further, lets test that contentlayer is all hooked up correctly.</p>\n<pre><code>yarn dev\n</code></pre>\n<p>If all works, you should get an output a bit like the following:</p>\n<pre><code>$ next dev\nready - started server on 0.0.0.0:3000, url: http://localhost:3000\ninfo  - SWC minify release candidate enabled. https://nextjs.link/swcmin\nGenerated 3 documents in .contentlayer\nevent - compiled client and server successfully in 1225 ms (178 modules)\nwait  - compiling...\nevent - compiled client and server successfully in 49 ms (178 modules)\n</code></pre>\n<p>Notice the <code>Generated 3 documents in .contentlayer</code> bit, that tells us that we've hooked contentlayer up and its generated 3 files based on our markdown files.</p>\n<p>If we look in our project, a <code>.contentlayer</code> folder has been created, don't edit anything inside of here as it gets regenerated each time things are changed. But if we go take a look, we should have a folder inside called <code>generated</code> and a <code>Post</code> folder inside that.</p>\n<pre><code>.\n└── .contentlayer/\n    ├── .cache\n    └── generated/\n        └── Post/\n            ├── _index.json\n            ├── _index.mjs\n            ├── posts__post-1.md.json\n            ├── posts__post-2.md.json\n            └── posts__post-3.md.json\n</code></pre>\n<p>Take a look at one of the files, <code>posts__post-1.md.json</code> and it will look something like this:</p>\n<pre><code>{\n  \"title\": \"My first blog post\",\n  \"publishedAt\": \"2022-06-24T00:00:00.000Z\",\n  \"tags\": [\n    \"Nextjs\",\n    \"React\"\n  ],\n  \"image\": \"/static/post-1-hero.webp\",\n  \"body\": {\n    \"raw\": \"\\nMollit nisi cillum exercitation minim officia velit laborum non Lorem\\nadipisicing dolore. Labore commodo consectetur commodo velit adipisicing irure\\ndolore dolor reprehenderit aliquip. Reprehenderit cillum mollit eiusmod\\nexcepteur elit ipsum aute pariatur in. Cupidatat ex culpa velit culpa ad non\\nlabore exercitation irure laborum.\\n\",\n    \"html\": \"&#x3C;p>Mollit nisi cillum exercitation minim officia velit laborum non Lorem\\nadipisicing dolore. Labore commodo consectetur commodo velit adipisicing irure\\ndolore dolor reprehenderit aliquip. Reprehenderit cillum mollit eiusmod\\nexcepteur elit ipsum aute pariatur in. Cupidatat ex culpa velit culpa ad non\\nlabore exercitation irure laborum.&#x3C;/p>\"\n  },\n  \"_id\": \"posts/post-1.md\",\n  \"_raw\": {\n    \"sourceFilePath\": \"posts/post-1.md\",\n    \"sourceFileName\": \"post-1.md\",\n    \"sourceFileDir\": \"posts\",\n    \"contentType\": \"markdown\",\n    \"flattenedPath\": \"posts/post-1\"\n  },\n  \"type\": \"Post\",\n  \"slug\": \"post-1\"\n}\n</code></pre>\n<p>In this file, we can see what contentlayer has generated, we've got <code>body.html</code> from our Markdown content, our slug, tags, date and title all there. Now lets use that inside react!</p>\n<h2>Rendering the posts</h2>\n<p>We're going to keep this simple by just using the <code>index.js</code> page to fetch our content, but we could if we wanted to, break this out into a separate page.</p>\n<p>Open up the <code>pages/index.js</code> file and delete everything inside of it, we're going to start fresh.</p>\n<p>I'm a big fan of arrow functions but if you want to use a traditional function, that's fine.</p>\n<p>Place this inside the <code>inedx.js</code> file to get started.</p>\n<pre><code class=\"language-jsx\">const Index = () => {\n  return &#x3C;div>Hello world.&#x3C;/div>;\n};\n\nexport default Index;\n</code></pre>\n<p>If you run the app with <code>yarn dev</code> now, and open it in a browser, <code>http://localhost:3000</code>, you should see a blank page with <code>hello world</code> in the corner. If so, great! Let's move on.</p>\n<p>Now update your index.js file to have the following:</p>\n<pre><code class=\"language-jsx\">import { allPosts } from \"contentlayer/generated\";\n\nexport async function getStaticProps() {\n  const posts = allPosts.sort(\n    (a, b) => Number(new Date(b.publishedAt)) - Number(new Date(a.publishedAt))\n  );\n  return { props: { posts } };\n}\n\nconst Index = ({ posts }) => {\n  console.log(posts);\n  return &#x3C;div>Hello world!&#x3C;/div>;\n};\n\nexport default Index;\n</code></pre>\n<p>What we're doing here is adding the <code>allPosts</code> import that contentlayer generated, remember the <code>.contentlayer</code> folder, take a look in there at the <code>_index.mjs</code> file, that's where the <code>allPosts</code> function comes from.</p>\n<p>We're going to use Next.js <code>getStaticProps</code> method (which is asynchronous) - <code>getStaticProps</code> is a method to tell Next.js to pre-render this page at build time, and use the props provided by <code>getStaticProps</code>. You can read more about this <a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-static-props\">here</a>.</p>\n<p>We're then passing <code>posts</code> to the <code>Index</code> method, and if you <code>console.log(posts)</code> inside that, you'll be able to see them on the running app console.</p>\n<p>I also created a folder at the root of my project called <code>static</code> with some images inside <code>post-1-hero.webp</code> which is what is in the markdown file for the <code>image</code> tag.</p>\n<p>This is my final <code>index.js</code> file</p>\n<pre><code class=\"language-jsx\">import { allPosts } from \"contentlayer/generated\";\nimport Image from \"next/image\";\n\nexport async function getStaticProps() {\n  const posts = allPosts.sort(\n    (a, b) => Number(new Date(b.publishedAt)) - Number(new Date(a.publishedAt))\n  );\n  return { props: { posts } };\n}\n\nconst Index = ({ posts }) => {\n  return (\n    &#x3C;div>\n      &#x3C;div className=\"posts\">\n        &#x3C;h1>Posts&#x3C;/h1>\n\n        {posts.map((post, i) => (\n          &#x3C;div key={i} className=\"post\">\n            &#x3C;div>\n              &#x3C;h2>{post.title}&#x3C;/h2>\n\n              &#x3C;span>{post.publishedAt}&#x3C;/span>\n\n              {/* Loop through any tags if we have any */}\n              &#x3C;ul>\n                {post.tags &#x26;&#x26; post.tags.map((tag, i) => &#x3C;li key={i}>{tag}&#x3C;/li>)}\n              &#x3C;/ul>\n            &#x3C;/div>\n\n            {post.image &#x26;&#x26; (\n              &#x3C;div\n                style={{\n                  width: \"200px\",\n                  position: \"relative\",\n                  height: \"100px\",\n                }}\n              >\n                &#x3C;Image\n                  src={post.image}\n                  alt={post.title}\n                  layout=\"fill\"\n                  objectFit=\"cover\"\n                />\n              &#x3C;/div>\n            )}\n\n            {/* Post body */}\n            &#x3C;p>{post.body.raw}&#x3C;/p>\n          &#x3C;/div>\n        ))}\n      &#x3C;/div>\n    &#x3C;/div>\n  );\n};\n\nexport default Index;\n</code></pre>\n<p>If you've followed this guide, you should be able to start your project</p>\n<pre><code>yarn dev\n</code></pre>\n<p>and see some <code>posts</code> on the page.</p>\n<p>This will all be statically generated at build time which is great for speed, no need for a back-end to store your blog posts any more, just add a new post markdown file, commit it, and run a build/deploy.</p>\n<p>Whilst there are so many things that can be done with Contentlayer, you can look at adding pagination, fetching next and previous posts and having multiple document types, all within the same code-base.</p>\n<p>I really like contentlayer and the fact that it means I can write blog posts/article and just store them in my Git repo, posts can then be version controlled and I don't have the overhead of running a server to store the posts.</p>\n<p>Feel free to checkout this code in my repo <a href=\"https://github.com/lordkerwin/nextjs-contentlayer-demo\">here</a>.</p>\n<p>I also use Contentlayer on my personal website, you can see the code for that <a href=\"https://github.com/lordkerwin/v2\">here</a> or see it in action by going to <a href=\"https://seankerwin.dev\">seankerwin.dev</a></p>"
  },
  "_id": "articles/post-1.md",
  "_raw": {
    "sourceFilePath": "articles/post-1.md",
    "sourceFileName": "post-1.md",
    "sourceFileDir": "articles",
    "contentType": "markdown",
    "flattenedPath": "articles/post-1"
  },
  "type": "Article",
  "readingTime": {
    "text": "8 min read",
    "minutes": 7.885,
    "time": 473100,
    "words": 1577
  },
  "wordCount": 1579,
  "slug": "post-1"
}