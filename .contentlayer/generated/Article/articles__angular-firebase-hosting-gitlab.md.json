{
  "title": "Angular + Firebase Hosting + Gitlab",
  "publishedAt": "2020-10-17",
  "tags": [
    "angular",
    "firebase",
    "gitlab"
  ],
  "image": "/public/post-1-hero.webp",
  "body": {
    "raw": "\nSo in this guide, I'm going to show you how I deploy an angular site to Google's firebase hosting using Gitlabs CI/CD Pipelines to do all the build and deploy for me.\n\nI'm also going to be doing a staging / production builds, this way I can see things in staging and test/play and when i'm happy, push my changes to the repo's `main/master` branch and Gitlab will deploy it all to production.\n\nOk, so first thing, we need the Firebase CLI installed, using the following command in your terminal:\n\n```bash\nnpm install -g firebase-tools\n```\n\nOnce that is all done, head over to the [Firebase Console](https://console.firebase.google.com/) and create 2 new projects:\n\nFor this demo, I created 2\n\n`fir-hosting-demo-staging`\nand\n`fir-hosting-demo-prod`\n\nYou need to have 2 seperate projects if you want to deploy to staging and then production, if you don't, just create the one project.\n\nOnce they're created, head back over to your Angular application, we've got a bit of preparation to do.\n\nNavigate to your angular application using a terminal and run the following command:\n\n`firebase init`\n\nHighlight the `hosting` option and then the `Use an existing project` option.\n\nSelect your _Staging_ project from the list that you get by using the arrow keys.\n\nYou'll then be asked the question\n\n```bash\nWhat do you want to use as your public directory?\n```\n\nThis is the path that is set in the `angular.json` for `outputPath`, it's the path that everything goes to when you run `ng build`.\n\nFor me, it is `dist/firebase-hosting-demo` as that is the name of my Angular application. So set it to that.\n\nYou'll then be asked about redirects and as its an angular application, you'll want to select `yes` to redirect everything to `index.html`.\n\nOnce you have ran this command, open up the newly created file called `.firebaserc` and it should look something like this:\n\n```\n{\n  \"projects\": {\n    \"default\": \"fir-hosting-demo-staging\"\n  }\n}\n```\n\nI like to rename my project alias, so go ahead and change `default` to `staging`\n\n```\n{\n  \"projects\": {\n    \"staging\": \"fir-hosting-demo-staging\"\n  }\n}\n```\n\nWe're now going to add our production hosting, run the following command in the terminal.\n\n`firebase use --add`\n\nYou'll then be given a list of your current firebase projects, select the production one you created.\n\nYou then have to give it an alias, I like to call mine `production`.\n\nIf you head over to the `.firebaserc` file, it should now look like this:\n\n```\n{\n  \"projects\": {\n    \"staging\": \"fir-hosting-demo-staging\",\n    \"production\": \"fir-hosting-demo-prod\"\n  }\n}\n```\n\nYou can now in the terminal of that project, just run\n\n`firebase use staging` and it will switch to use the staging project, same for `firebase use production`.\n\nNow, if everything has been setup right, you can go ahead and do a test build/deploy.\n\nIn your terminal, make sure you're using `staging` by running\n`firebase use staging`\n\nBuild your Angular application using the command\n`ng build`\n\nOnce that has built, you should have a `dist` folder with your application inside, for me it's `dist/firebase-hosting-demo`.\n\nGo ahead and run the command `firebase deploy --only hosting` and watch as Firebase will now take all the built files from the output folder and upload them to firebase staging branch.\n\nOnce that has completed, the firebase cli will return a Hosting URL where you can see you staging application.\n\nYou can do the same for the production branch buy running the command to switch to production `firebase use production` and then the same `firebase deploy --only hosting` and the same files will be pushed to the production project in firebase.\n\nThis is good for testing, but it will become a bit tedious to remember which branch you're on, which project you're using and remembering that you need to build/push your code.\n\nThis is where we're going to leverage Gitlab and let it do all of the work for you.\n\nOther CI/CD tools can do the same, I just mainly use Gitlab.\n\nSo now this is all setup, let's move onto the next step!\n\n# Gitlab\n\nIf you have your code all stored in Gitlab, the way I like to work is have 3 branches, `master`, `staging`, and `develop`.\n\nBoth `master` and `staging` are protected branches and cannot be pushed to locally, only via a merge request using Gitlab.\n\nSo, for me, I'm going to switch to the `develop` branch of my code.\n\n`git checkout -b develop`\n\nWe're going to need a CI Token, this is a firebase token that Gitlab can use to act on our behalf. To get one of these, in your terminal, run the command\n\n```\nfirebase login:ci\n```\n\nA popup will appear in your browser to login and ask for permissions, once you have done that, back in your terminal, you'll be given a CI Token that looks a bit like this.\n\n```\n1//03s000000000000000000000F-L9I00000000000000W-_000000Tg\n```\n\nI have purposely changed mine for this demo, yours won't have lots of zeros inside it.\n\nHead over to gitlab as we now need to store this token in the project.\n\nIn your repo in gitlab, click the _Settings > CI/CD_ and expand the section for _Variables_.\n\nClick the `Add Variable` button and a window like this will appear.\n\n![Gitlab Variables](https://dev-to-uploads.s3.amazonaws.com/i/8x3upg8rocxa8opcu1f5.png)\n\nCall the variable `FIREBASE_TOKEN`, and paste in the value you got from the `ci:login` before. I don't have the variable protected or masked, I have found that sometimes Gitlab has issues when I check these options.\n\nSave the variable and we're done with this part of the setup.\n\nBack into our code, create a new file at the `ROOT` level of your project called `.gitlab-ci.yml`. This is a file that gives Gitlab the instructions needed to build your project.\n\nPaste in the following into that file:\n\n```\nstages:\n    - build\n    - deploy\n\nimage: node:12.13.0-alpine\n\ncache:\n    paths:\n        - node_modules/\n\nbuild-staging:\n    stage: build\n    rules:\n        - if: $CI_COMMIT_BRANCH == \"staging\"\n    script:\n        # Install dependencies\n        - npm install\n        # Build App\n        - npm run build\n    artifacts:\n        paths:\n            # Build folder\n            - dist/firebase-hosting-demo\n        expire_in: 1 hour\n\ndeploy-staging:\n    stage: deploy\n    script:\n        - npm install -g firebase-tools\n        - firebase use --token $FIREBASE_TOKEN staging\n        - firebase deploy --only hosting -m \"Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID\" --non-interactive --token $FIREBASE_TOKEN\n    rules:\n        - if: $CI_COMMIT_BRANCH == \"staging\"\n\nbuild-production:\n    stage: build\n    rules:\n        - if: $CI_COMMIT_BRANCH == \"master\"\n    script:\n        # Install dependencies\n        - npm install\n        # Build App\n        - npm run build\n    artifacts:\n        paths:\n            # Build folder\n            - dist/firebase-hosting-demo\n        expire_in: 1 hour\n\ndeploy-production:\n    stage: deploy\n    script:\n        - npm install -g firebase-tools\n        - firebase use --token $FIREBASE_TOKEN production\n        - firebase deploy --only hosting -m \"Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID\" --non-interactive --token $FIREBASE_TOKEN\n    rules:\n        - if: $CI_COMMIT_BRANCH == \"master\"\n\n```\n\nI'm not going to go over in depth what this file does, but essentially, it will build and deploy your Angular application for you, but use different Firebase projects depending on what Git branch you use.\n\nSo the idea is, make some code changes on your `develop` branch. Once you're happy, commit and push your code to the remote develop branch.\n\nDo a merge request when you're ready from `develop` to `staging` and watch as Gitlab will start a pipeline to build your Angular app and deploy it to Firebase.\n\nWhen you're happy to go live, do another merge request from `staging` to `master` in Gitlab and it will build again and deploy to production.\n\nThe first time this runs it might take some time, this is because in my `gitlab-ci.yml` file, I have specified to cache the `node_modules`, but once this has done, pipelines that run after this should be faster!\n\nHope you enjoyed my guide, and any questions, don't hesitate to contact me!.\n",
    "html": "<p>So in this guide, I'm going to show you how I deploy an angular site to Google's firebase hosting using Gitlabs CI/CD Pipelines to do all the build and deploy for me.</p>\n<p>I'm also going to be doing a staging / production builds, this way I can see things in staging and test/play and when i'm happy, push my changes to the repo's <code>main/master</code> branch and Gitlab will deploy it all to production.</p>\n<p>Ok, so first thing, we need the Firebase CLI installed, using the following command in your terminal:</p>\n<pre><code class=\"language-bash\">npm install -g firebase-tools\n</code></pre>\n<p>Once that is all done, head over to the <a href=\"https://console.firebase.google.com/\">Firebase Console</a> and create 2 new projects:</p>\n<p>For this demo, I created 2</p>\n<p><code>fir-hosting-demo-staging</code>\nand\n<code>fir-hosting-demo-prod</code></p>\n<p>You need to have 2 seperate projects if you want to deploy to staging and then production, if you don't, just create the one project.</p>\n<p>Once they're created, head back over to your Angular application, we've got a bit of preparation to do.</p>\n<p>Navigate to your angular application using a terminal and run the following command:</p>\n<p><code>firebase init</code></p>\n<p>Highlight the <code>hosting</code> option and then the <code>Use an existing project</code> option.</p>\n<p>Select your <em>Staging</em> project from the list that you get by using the arrow keys.</p>\n<p>You'll then be asked the question</p>\n<pre><code class=\"language-bash\">What do you want to use as your public directory?\n</code></pre>\n<p>This is the path that is set in the <code>angular.json</code> for <code>outputPath</code>, it's the path that everything goes to when you run <code>ng build</code>.</p>\n<p>For me, it is <code>dist/firebase-hosting-demo</code> as that is the name of my Angular application. So set it to that.</p>\n<p>You'll then be asked about redirects and as its an angular application, you'll want to select <code>yes</code> to redirect everything to <code>index.html</code>.</p>\n<p>Once you have ran this command, open up the newly created file called <code>.firebaserc</code> and it should look something like this:</p>\n<pre><code>{\n  \"projects\": {\n    \"default\": \"fir-hosting-demo-staging\"\n  }\n}\n</code></pre>\n<p>I like to rename my project alias, so go ahead and change <code>default</code> to <code>staging</code></p>\n<pre><code>{\n  \"projects\": {\n    \"staging\": \"fir-hosting-demo-staging\"\n  }\n}\n</code></pre>\n<p>We're now going to add our production hosting, run the following command in the terminal.</p>\n<p><code>firebase use --add</code></p>\n<p>You'll then be given a list of your current firebase projects, select the production one you created.</p>\n<p>You then have to give it an alias, I like to call mine <code>production</code>.</p>\n<p>If you head over to the <code>.firebaserc</code> file, it should now look like this:</p>\n<pre><code>{\n  \"projects\": {\n    \"staging\": \"fir-hosting-demo-staging\",\n    \"production\": \"fir-hosting-demo-prod\"\n  }\n}\n</code></pre>\n<p>You can now in the terminal of that project, just run</p>\n<p><code>firebase use staging</code> and it will switch to use the staging project, same for <code>firebase use production</code>.</p>\n<p>Now, if everything has been setup right, you can go ahead and do a test build/deploy.</p>\n<p>In your terminal, make sure you're using <code>staging</code> by running\n<code>firebase use staging</code></p>\n<p>Build your Angular application using the command\n<code>ng build</code></p>\n<p>Once that has built, you should have a <code>dist</code> folder with your application inside, for me it's <code>dist/firebase-hosting-demo</code>.</p>\n<p>Go ahead and run the command <code>firebase deploy --only hosting</code> and watch as Firebase will now take all the built files from the output folder and upload them to firebase staging branch.</p>\n<p>Once that has completed, the firebase cli will return a Hosting URL where you can see you staging application.</p>\n<p>You can do the same for the production branch buy running the command to switch to production <code>firebase use production</code> and then the same <code>firebase deploy --only hosting</code> and the same files will be pushed to the production project in firebase.</p>\n<p>This is good for testing, but it will become a bit tedious to remember which branch you're on, which project you're using and remembering that you need to build/push your code.</p>\n<p>This is where we're going to leverage Gitlab and let it do all of the work for you.</p>\n<p>Other CI/CD tools can do the same, I just mainly use Gitlab.</p>\n<p>So now this is all setup, let's move onto the next step!</p>\n<h1>Gitlab</h1>\n<p>If you have your code all stored in Gitlab, the way I like to work is have 3 branches, <code>master</code>, <code>staging</code>, and <code>develop</code>.</p>\n<p>Both <code>master</code> and <code>staging</code> are protected branches and cannot be pushed to locally, only via a merge request using Gitlab.</p>\n<p>So, for me, I'm going to switch to the <code>develop</code> branch of my code.</p>\n<p><code>git checkout -b develop</code></p>\n<p>We're going to need a CI Token, this is a firebase token that Gitlab can use to act on our behalf. To get one of these, in your terminal, run the command</p>\n<pre><code>firebase login:ci\n</code></pre>\n<p>A popup will appear in your browser to login and ask for permissions, once you have done that, back in your terminal, you'll be given a CI Token that looks a bit like this.</p>\n<pre><code>1//03s000000000000000000000F-L9I00000000000000W-_000000Tg\n</code></pre>\n<p>I have purposely changed mine for this demo, yours won't have lots of zeros inside it.</p>\n<p>Head over to gitlab as we now need to store this token in the project.</p>\n<p>In your repo in gitlab, click the <em>Settings > CI/CD</em> and expand the section for <em>Variables</em>.</p>\n<p>Click the <code>Add Variable</code> button and a window like this will appear.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/8x3upg8rocxa8opcu1f5.png\" alt=\"Gitlab Variables\"></p>\n<p>Call the variable <code>FIREBASE_TOKEN</code>, and paste in the value you got from the <code>ci:login</code> before. I don't have the variable protected or masked, I have found that sometimes Gitlab has issues when I check these options.</p>\n<p>Save the variable and we're done with this part of the setup.</p>\n<p>Back into our code, create a new file at the <code>ROOT</code> level of your project called <code>.gitlab-ci.yml</code>. This is a file that gives Gitlab the instructions needed to build your project.</p>\n<p>Paste in the following into that file:</p>\n<pre><code>stages:\n    - build\n    - deploy\n\nimage: node:12.13.0-alpine\n\ncache:\n    paths:\n        - node_modules/\n\nbuild-staging:\n    stage: build\n    rules:\n        - if: $CI_COMMIT_BRANCH == \"staging\"\n    script:\n        # Install dependencies\n        - npm install\n        # Build App\n        - npm run build\n    artifacts:\n        paths:\n            # Build folder\n            - dist/firebase-hosting-demo\n        expire_in: 1 hour\n\ndeploy-staging:\n    stage: deploy\n    script:\n        - npm install -g firebase-tools\n        - firebase use --token $FIREBASE_TOKEN staging\n        - firebase deploy --only hosting -m \"Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID\" --non-interactive --token $FIREBASE_TOKEN\n    rules:\n        - if: $CI_COMMIT_BRANCH == \"staging\"\n\nbuild-production:\n    stage: build\n    rules:\n        - if: $CI_COMMIT_BRANCH == \"master\"\n    script:\n        # Install dependencies\n        - npm install\n        # Build App\n        - npm run build\n    artifacts:\n        paths:\n            # Build folder\n            - dist/firebase-hosting-demo\n        expire_in: 1 hour\n\ndeploy-production:\n    stage: deploy\n    script:\n        - npm install -g firebase-tools\n        - firebase use --token $FIREBASE_TOKEN production\n        - firebase deploy --only hosting -m \"Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID\" --non-interactive --token $FIREBASE_TOKEN\n    rules:\n        - if: $CI_COMMIT_BRANCH == \"master\"\n\n</code></pre>\n<p>I'm not going to go over in depth what this file does, but essentially, it will build and deploy your Angular application for you, but use different Firebase projects depending on what Git branch you use.</p>\n<p>So the idea is, make some code changes on your <code>develop</code> branch. Once you're happy, commit and push your code to the remote develop branch.</p>\n<p>Do a merge request when you're ready from <code>develop</code> to <code>staging</code> and watch as Gitlab will start a pipeline to build your Angular app and deploy it to Firebase.</p>\n<p>When you're happy to go live, do another merge request from <code>staging</code> to <code>master</code> in Gitlab and it will build again and deploy to production.</p>\n<p>The first time this runs it might take some time, this is because in my <code>gitlab-ci.yml</code> file, I have specified to cache the <code>node_modules</code>, but once this has done, pipelines that run after this should be faster!</p>\n<p>Hope you enjoyed my guide, and any questions, don't hesitate to contact me!.</p>"
  },
  "_id": "articles/angular-firebase-hosting-gitlab.md",
  "_raw": {
    "sourceFilePath": "articles/angular-firebase-hosting-gitlab.md",
    "sourceFileName": "angular-firebase-hosting-gitlab.md",
    "sourceFileDir": "articles",
    "contentType": "markdown",
    "flattenedPath": "articles/angular-firebase-hosting-gitlab"
  },
  "type": "Article",
  "readingTime": {
    "text": "7 min read",
    "minutes": 6.305,
    "time": 378300,
    "words": 1261
  },
  "wordCount": 1263,
  "slug": "angular-firebase-hosting-gitlab"
}